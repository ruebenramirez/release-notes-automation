name: automated-release-notes
on:
  create
jobs:
  retrieve-commit-messages-as-release-notes:
    if: contains(github.ref, 'tags') # only run on creation of tag
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: checkout entire repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: release notes from commits since last tag
        id: build_release_notes
        run: >
          CURRENT_TAG=$(echo $GITHUB_REF | cut -d '/' -f 3);
          LAST_TAG=$(git tag -l | grep -v $CURRENT_TAG | tail -n 1);
          LAST_TAG_COMMIT=$(git show-ref $LAST_TAG | cut -d ' ' -f 1);
          if [[ -z $LAST_TAG_COMMIT ]]; then
            echo "Detected first release tag: using entire commit history to generate our first Release Notes.":
            LAST_TAG_COMMIT=$(git --no-pager log -1 --pretty=oneline | cut -d ' ' -f 1)
          fi;
          CURRENT_COMMIT=$(git log | head -n 1 | cut -d ' ' -f 2);

          RELEASE_NOTES=$(git --no-pager log --pretty=oneline $LAST_TAG_COMMIT..$CURRENT_COMMIT);

          echo "current tag: $CURRENT_TAG";
          echo "last tag: $LAST_TAG";
          echo "last tag commit: $LAST_TAG_COMMIT";
          echo "head: $CURRENT_COMMIT";
          echo "Release Notes: $RELEASE_NOTES";

          echo "::set-output name=release-notes::$RELEASE_NOTES";
          echo "::set-output name=current-tag::$CURRENT_TAG";

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_MESSAGE: ${{ join(steps.build_release_notes.outputs.release-notes, "\n") }}
          SLACK_TITLE: Release Notes ${{ steps.build_release_notes.outputs.current-tag }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
